name: 'Setup Claude Tokens'
description: 'Setup Claude tokens for use in actions'
inputs:
  api-key:
    description: 'API key for authentication'
    required: true
    pattern: '^[A-Za-z0-9-_@]{20,128}$'
  api-endpoint:
    description: 'API endpoint URL'
    required: true
    pattern: '^https://[^\\s;]+$'
outputs:
  access-token:
    description: 'Access token'
    value: ${{ steps.fetch-tokens.outputs.access_token }}
  refresh-token:
    description: 'Refresh token'
    value: ${{ steps.fetch-tokens.outputs.refresh_token }}
  expires-at:
    description: 'Token expiration time'
    value: ${{ steps.fetch-tokens.outputs.expires_at }}
runs:
  using: 'composite'
  steps:
    - name: Fetch tokens
      id: fetch-tokens
      shell: bash
      run: |
        # Fail fast and handle pipeline errors correctly
        set -eo pipefail
        
        # Verify required inputs are present
        if [ -z "${{ inputs.api-key }}" ]; then
          echo "::error::API key is required but not provided"
          exit 1
        fi

        if [ -z "${{ inputs.api-endpoint }}" ]; then
          echo "::error::API endpoint is required but not provided"
          exit 1
        fi
        
        # Fetch from secure endpoint with authentication
        # Using -f to fail on server errors (4xx, 5xx)
        response=$(curl -sf -H "x-api-key: ${{ inputs.api-key }}" "${{ inputs.api-endpoint }}/get-token")
        
        # Verify response is not empty
        if [ -z "$response" ]; then
          echo "::error::Empty response from token endpoint"
          exit 1
        fi
        
        # Parse and mask the secrets
        access_token=$(echo "$response" | jq -r '.accessToken')
        refresh_token=$(echo "$response" | jq -r '.refreshToken')
        expires_at=$(echo "$response" | jq -r '.expiresAt')
        
        # Echo the raw epoch timestamp
        echo "Token expires at epoch: $expires_at"
        
        # Convert expiry timestamp to human readable format
        expiry_date=$(date -r $(($expires_at/1000)) "+%Y-%m-%d %H:%M:%S %Z")
        echo "Token expires at: $expiry_date"
        
        # Verify tokens were parsed successfully
        if [ -z "$access_token" ] || [ -z "$refresh_token" ] || [ -z "$expires_at" ] || [ "$access_token" == "null" ]; then
          echo "::error::Failed to parse token response"
          exit 1
        fi
        
        # Mask the secrets
        echo "::add-mask::$access_token"
        echo "::add-mask::$refresh_token"
        echo "::add-mask::$expires_at"
        
        # Set outputs
        echo "access_token=$access_token" >> $GITHUB_OUTPUT
        echo "refresh_token=$refresh_token" >> $GITHUB_OUTPUT
        echo "expires_at=$expires_at" >> $GITHUB_OUTPUT